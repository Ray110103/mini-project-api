generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  role           Role          @default(USER)
  pictureProfile String?
  createdAt      DateTime      @default(now())
  updatedat      DateTime      @updatedAt
  Coupon         Coupon[]
  events         Event[]
  Product        Product[]
  Transaction    Transaction[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  discount  Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("coupons")
}

model Event {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String    @unique
  description String
  thumbnail   String?
  location    String
  startDate   DateTime
  endDate     DateTime
  adminId     Int
  admin       User      @relation(fields: [adminId], references: [id])
  price       Float
  category    String
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

model Product {
  id                 Int                 @id @default(autoincrement())
  name               String
  price              Int
  stock              Int
  userId             Int
  user               User                @relation(fields: [userId], references: [id])
  createdAt          DateTime            @default(now())
  updateddAt         DateTime            @updatedAt
  transactionDetails TransactionDetail[]

  @@map("products")
}

model Transaction {
  id                 Int                 @id @default(autoincrement())
  uuid               String              @unique @default(uuid())
  userId             Int
  user               User                @relation(fields: [userId], references: [id])
  status             TransactionStatus   @default(WAITING_FOR_PAYMENT)
  paymentProof       String?
  createdAt          DateTime            @default(now())
  updateddAt         DateTime            @updatedAt
  transactionDetails TransactionDetail[]

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  REJECT
  EXPIRED
}

model TransactionDetail {
  id            Int         @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  qty           Int
  price         Int
  createdAt     DateTime    @default(now())
  updateddAt    DateTime    @updatedAt

  @@map("transaction_details")
}
